/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file imu_server.msg */


#include <inttypes.h>
#include <px4_platform_common/log.h>
#include <px4_platform_common/defines.h>
#include <uORB/topics/imu_server.h>
#include <uORB/topics/uORBTopics.hpp>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>
#include <lib/matrix/matrix/math.hpp>
#include <lib/mathlib/mathlib.h>

constexpr char __orb_imu_server_fields[] = "uint64_t timestamp;uint64_t[10] ts;float temperature;float[10] accel_x;float[10] accel_y;float[10] accel_z;float[10] gyro_x;float[10] gyro_y;float[10] gyro_z;uint8_t[4] _padding0;";

ORB_DEFINE(imu_server, struct imu_server_s, 332, __orb_imu_server_fields, static_cast<uint8_t>(ORB_ID::imu_server));


void print_message(const imu_server_s &message)
{

	PX4_INFO_RAW(" imu_server_s\n");

	const hrt_abstime now = hrt_absolute_time();

	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, (now - message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	PX4_INFO_RAW("\tts: [%" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 ", %" PRIu64 "]\n", message.ts[0], message.ts[1], message.ts[2], message.ts[3], message.ts[4], message.ts[5], message.ts[6], message.ts[7], message.ts[8], message.ts[9]);
	PX4_INFO_RAW("\ttemperature: %.4f\n", (double)message.temperature);
	PX4_INFO_RAW("\taccel_x: [%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.accel_x[0], (double)message.accel_x[1], (double)message.accel_x[2], (double)message.accel_x[3], (double)message.accel_x[4], (double)message.accel_x[5], (double)message.accel_x[6], (double)message.accel_x[7], (double)message.accel_x[8], (double)message.accel_x[9]);
	PX4_INFO_RAW("\taccel_y: [%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.accel_y[0], (double)message.accel_y[1], (double)message.accel_y[2], (double)message.accel_y[3], (double)message.accel_y[4], (double)message.accel_y[5], (double)message.accel_y[6], (double)message.accel_y[7], (double)message.accel_y[8], (double)message.accel_y[9]);
	PX4_INFO_RAW("\taccel_z: [%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.accel_z[0], (double)message.accel_z[1], (double)message.accel_z[2], (double)message.accel_z[3], (double)message.accel_z[4], (double)message.accel_z[5], (double)message.accel_z[6], (double)message.accel_z[7], (double)message.accel_z[8], (double)message.accel_z[9]);
	PX4_INFO_RAW("\tgyro_x: [%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.gyro_x[0], (double)message.gyro_x[1], (double)message.gyro_x[2], (double)message.gyro_x[3], (double)message.gyro_x[4], (double)message.gyro_x[5], (double)message.gyro_x[6], (double)message.gyro_x[7], (double)message.gyro_x[8], (double)message.gyro_x[9]);
	PX4_INFO_RAW("\tgyro_y: [%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.gyro_y[0], (double)message.gyro_y[1], (double)message.gyro_y[2], (double)message.gyro_y[3], (double)message.gyro_y[4], (double)message.gyro_y[5], (double)message.gyro_y[6], (double)message.gyro_y[7], (double)message.gyro_y[8], (double)message.gyro_y[9]);
	PX4_INFO_RAW("\tgyro_z: [%.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f]\n", (double)message.gyro_z[0], (double)message.gyro_z[1], (double)message.gyro_z[2], (double)message.gyro_z[3], (double)message.gyro_z[4], (double)message.gyro_z[5], (double)message.gyro_z[6], (double)message.gyro_z[7], (double)message.gyro_z[8], (double)message.gyro_z[9]);
	
}
